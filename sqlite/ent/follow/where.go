// Code generated by ent, DO NOT EDIT.

package follow

import (
	"entgo.io/ent/dialect/sql"
	"github.com/Mushus/activitypub/sqlite/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Follow {
	return predicate.Follow(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Follow {
	return predicate.Follow(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Follow {
	return predicate.Follow(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Follow {
	return predicate.Follow(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Follow {
	return predicate.Follow(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Follow {
	return predicate.Follow(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Follow {
	return predicate.Follow(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Follow {
	return predicate.Follow(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Follow {
	return predicate.Follow(sql.FieldContainsFold(FieldID, id))
}

// FromID applies equality check predicate on the "fromID" field. It's identical to FromIDEQ.
func FromID(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldFromID, v))
}

// ToID applies equality check predicate on the "toID" field. It's identical to ToIDEQ.
func ToID(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldToID, v))
}

// FromIDEQ applies the EQ predicate on the "fromID" field.
func FromIDEQ(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldFromID, v))
}

// FromIDNEQ applies the NEQ predicate on the "fromID" field.
func FromIDNEQ(v string) predicate.Follow {
	return predicate.Follow(sql.FieldNEQ(FieldFromID, v))
}

// FromIDIn applies the In predicate on the "fromID" field.
func FromIDIn(vs ...string) predicate.Follow {
	return predicate.Follow(sql.FieldIn(FieldFromID, vs...))
}

// FromIDNotIn applies the NotIn predicate on the "fromID" field.
func FromIDNotIn(vs ...string) predicate.Follow {
	return predicate.Follow(sql.FieldNotIn(FieldFromID, vs...))
}

// FromIDGT applies the GT predicate on the "fromID" field.
func FromIDGT(v string) predicate.Follow {
	return predicate.Follow(sql.FieldGT(FieldFromID, v))
}

// FromIDGTE applies the GTE predicate on the "fromID" field.
func FromIDGTE(v string) predicate.Follow {
	return predicate.Follow(sql.FieldGTE(FieldFromID, v))
}

// FromIDLT applies the LT predicate on the "fromID" field.
func FromIDLT(v string) predicate.Follow {
	return predicate.Follow(sql.FieldLT(FieldFromID, v))
}

// FromIDLTE applies the LTE predicate on the "fromID" field.
func FromIDLTE(v string) predicate.Follow {
	return predicate.Follow(sql.FieldLTE(FieldFromID, v))
}

// FromIDContains applies the Contains predicate on the "fromID" field.
func FromIDContains(v string) predicate.Follow {
	return predicate.Follow(sql.FieldContains(FieldFromID, v))
}

// FromIDHasPrefix applies the HasPrefix predicate on the "fromID" field.
func FromIDHasPrefix(v string) predicate.Follow {
	return predicate.Follow(sql.FieldHasPrefix(FieldFromID, v))
}

// FromIDHasSuffix applies the HasSuffix predicate on the "fromID" field.
func FromIDHasSuffix(v string) predicate.Follow {
	return predicate.Follow(sql.FieldHasSuffix(FieldFromID, v))
}

// FromIDEqualFold applies the EqualFold predicate on the "fromID" field.
func FromIDEqualFold(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEqualFold(FieldFromID, v))
}

// FromIDContainsFold applies the ContainsFold predicate on the "fromID" field.
func FromIDContainsFold(v string) predicate.Follow {
	return predicate.Follow(sql.FieldContainsFold(FieldFromID, v))
}

// ToIDEQ applies the EQ predicate on the "toID" field.
func ToIDEQ(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEQ(FieldToID, v))
}

// ToIDNEQ applies the NEQ predicate on the "toID" field.
func ToIDNEQ(v string) predicate.Follow {
	return predicate.Follow(sql.FieldNEQ(FieldToID, v))
}

// ToIDIn applies the In predicate on the "toID" field.
func ToIDIn(vs ...string) predicate.Follow {
	return predicate.Follow(sql.FieldIn(FieldToID, vs...))
}

// ToIDNotIn applies the NotIn predicate on the "toID" field.
func ToIDNotIn(vs ...string) predicate.Follow {
	return predicate.Follow(sql.FieldNotIn(FieldToID, vs...))
}

// ToIDGT applies the GT predicate on the "toID" field.
func ToIDGT(v string) predicate.Follow {
	return predicate.Follow(sql.FieldGT(FieldToID, v))
}

// ToIDGTE applies the GTE predicate on the "toID" field.
func ToIDGTE(v string) predicate.Follow {
	return predicate.Follow(sql.FieldGTE(FieldToID, v))
}

// ToIDLT applies the LT predicate on the "toID" field.
func ToIDLT(v string) predicate.Follow {
	return predicate.Follow(sql.FieldLT(FieldToID, v))
}

// ToIDLTE applies the LTE predicate on the "toID" field.
func ToIDLTE(v string) predicate.Follow {
	return predicate.Follow(sql.FieldLTE(FieldToID, v))
}

// ToIDContains applies the Contains predicate on the "toID" field.
func ToIDContains(v string) predicate.Follow {
	return predicate.Follow(sql.FieldContains(FieldToID, v))
}

// ToIDHasPrefix applies the HasPrefix predicate on the "toID" field.
func ToIDHasPrefix(v string) predicate.Follow {
	return predicate.Follow(sql.FieldHasPrefix(FieldToID, v))
}

// ToIDHasSuffix applies the HasSuffix predicate on the "toID" field.
func ToIDHasSuffix(v string) predicate.Follow {
	return predicate.Follow(sql.FieldHasSuffix(FieldToID, v))
}

// ToIDEqualFold applies the EqualFold predicate on the "toID" field.
func ToIDEqualFold(v string) predicate.Follow {
	return predicate.Follow(sql.FieldEqualFold(FieldToID, v))
}

// ToIDContainsFold applies the ContainsFold predicate on the "toID" field.
func ToIDContainsFold(v string) predicate.Follow {
	return predicate.Follow(sql.FieldContainsFold(FieldToID, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Follow) predicate.Follow {
	return predicate.Follow(func(s *sql.Selector) {
		p(s.Not())
	})
}
